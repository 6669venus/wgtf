#include "../pch.hpp"

#include "core_common/ngt_windows.hpp"
#include "core_serialization/file_system.hpp"

TEST(file_sytem)
{
	FileSystem fileSystem;

	char const * filePath = "TestFile.txt";
	char const * testData = "Uni, arch toressful, Could insits bervit of a pren, Abutio, yethis tassion, \
													to to les wity winet uponeus, licitly of be act it, Hiss, is himent the God's \
													joyalti-datche imusin a forine), ways knoth ne caught not rience, wer reat meorin \
													Here of ses of con ch conses our mandif Pal to expeat usives takescie infata he of \
													scup who . â€“ generated by Just Another Test Text Generator";

	size_t testDataLength = strlen(testData);
	if (fileSystem.exists(filePath))
		fileSystem.remove(filePath);

	CHECK(fileSystem.exists(filePath) == false);
	CHECK(fileSystem.writeFile(filePath, testData, testDataLength, std::ios::trunc | std::ios::out));
	CHECK(fileSystem.exists(filePath) == true);

	IFileSystem::istream_uptr stream = fileSystem.readFile(filePath, std::ios::in);
	CHECK(stream->size() == testDataLength);
	char * readedData = (char *)malloc(stream->size());
	size_t readedSize = stream->readRaw(readedData, stream->size());
	CHECK(readedSize == stream->size());
	stream = nullptr;

	memcmp(testData, readedData, testDataLength);

	CHECK(fileSystem.getFileType(filePath) == IFileSystem::FileType::File);
	CHECK(fileSystem.getFileType("dummy") == IFileSystem::FileType::NotFound);

	char const * movedFilePath = "MovedTestFile.txt";
	CHECK(fileSystem.move(filePath, movedFilePath));
	CHECK(fileSystem.exists(filePath) == false);
	CHECK(fileSystem.exists(movedFilePath) == true);

	CHECK(fileSystem.copy(movedFilePath, filePath));
	CHECK(fileSystem.exists(filePath) == true);
	CHECK(fileSystem.exists(movedFilePath) == true);

	CHECK(fileSystem.remove(movedFilePath));
	CHECK(fileSystem.exists(filePath) == true);
	CHECK(fileSystem.exists(movedFilePath) == false);

	FileInfo info = fileSystem.getFileInfo(filePath);
	CHECK(fileSystem.exists(info.fullPath.c_str()) == true);

	bool isTestFileFound = false;
	bool isAppBundleFound = false;

	fileSystem.enumerate(".", [&info, &isTestFileFound, &isAppBundleFound](FileInfo && fileInfo)
		{
			if (info.fullPath == fileInfo.fullPath)
				isTestFileFound |= true;

			std::string name = fileInfo.name();
			if (name == "generic_app_d.app" || name == "generic_app.app")
			{
				isAppBundleFound |= fileInfo.isDirectory();
			}
			return true;
		});

	CHECK(isTestFileFound);
	CHECK(isAppBundleFound);
	CHECK(fileSystem.remove(filePath));

	free(readedData);
}
