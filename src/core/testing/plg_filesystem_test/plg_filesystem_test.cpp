#include "core_generic_plugin/generic_plugin.hpp"
#include "core_serialization/interfaces/i_file_system.hpp"
#include "core_serialization/i_datastream.hpp"

class TestFileSystem : public PluginMain
{
public:
    TestFileSystem(IComponentContext & context) {}
    
    bool PostLoad(IComponentContext & context) override
    {
        return true;
    }
    
    void Initialise(IComponentContext & context) override
    {
        IFileSystem * fileSystem = context.queryInterface<IFileSystem>();
        assert(fileSystem != nullptr);
        
        char const * filePath = "TestFile.txt";
        char const * testData = "Uni, arch toressful, Could insits bervit of a pren, Abutio, yethis tassion, \
                                 to to les wity winet uponeus, licitly of be act it, Hiss, is himent the God's \
                                 joyalti-datche imusin a forine), ways knoth ne caught not rience, wer reat meorin \
                                 Here of ses of con ch conses our mandif Pal to expeat usives takescie infata he of \
                                 scup who . â€“ generated by Just Another Test Text Generator";
        size_t testDataLength = strlen(testData);
        if (fileSystem->exists(filePath))
            fileSystem->remove(filePath);
        
        assert(fileSystem->exists(filePath) == false);
        assert(fileSystem->writeFile(filePath, testData, testDataLength, std::ios::trunc | std::ios::out));
        assert(fileSystem->exists(filePath) == true);
        
        IFileSystem::istream_uptr stream = fileSystem->readFile(filePath, std::ios::in);
        assert(stream->size() == testDataLength);
        char * readedData = (char *)malloc(stream->size());
        size_t readedSize = stream->readRaw(readedData, stream->size());
        assert(readedSize == stream->size());
        stream = nullptr;
        
        memcmp(testData, readedData, testDataLength);
        
        assert(fileSystem->getFileType(filePath) == IFileSystem::FileType::File);
        assert(fileSystem->getFileType("dummy") == IFileSystem::FileType::NotFound);
        
        char const * movedFilePath = "MovedTestFile.txt";
        assert(fileSystem->move(filePath, movedFilePath));
        assert(fileSystem->exists(filePath) == false);
        assert(fileSystem->exists(movedFilePath) == true);
        
        assert(fileSystem->copy(movedFilePath, filePath));
        assert(fileSystem->exists(filePath) == true);
        assert(fileSystem->exists(movedFilePath) == true);
        
        assert(fileSystem->remove(movedFilePath));
        assert(fileSystem->exists(filePath) == true);
        assert(fileSystem->exists(movedFilePath) == false);
        
        FileInfo info = fileSystem->getFileInfo(filePath);
        assert(fileSystem->exists(info.fullPath.c_str()) == true);
        
        bool isTestFileFound = false;
        bool isAppBundleFound = false;
        
        fileSystem->enumerate(".", [&info, &isTestFileFound, &isAppBundleFound](FileInfo && fileInfo)
                              {
                                  if (info.fullPath == fileInfo.fullPath)
                                      isTestFileFound = true;
                                  
                                  std::string name = fileInfo.name();
                                  if (name == "generic_app_d.app" ||
                                      name == "generic_app.app")
                                  {
                                      assert(fileInfo.isDirectory());
                                      isAppBundleFound = true;
                                  }
                                  return true;
                              });
        
        assert(isTestFileFound);
        assert(isAppBundleFound);
        assert(fileSystem->remove(filePath));
        
        
        free(readedData);
    }
    
    bool Finalise(IComponentContext & context) override
    {
        return true;
    }
    void Unload(IComponentContext & context) override
    {
    }
};

PLG_CALLBACK_FUNC(TestFileSystem)