///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace NGTTestAutomation.Generic_app_UI
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The AFCT_Filters recording.
    /// </summary>
    [TestModule("8dd8d592-4d7f-469c-af72-5bb1fb3b9c1a", ModuleType.Recording, 1)]
    public partial class AFCT_Filters : ITestModule
    {
        /// <summary>
        /// Holds an instance of the NGTTestAutomation.NGTTestAutomationRepository repository.
        /// </summary>
        public static NGTTestAutomation.NGTTestAutomationRepository repo = NGTTestAutomation.NGTTestAutomationRepository.Instance;

        static AFCT_Filters instance = new AFCT_Filters();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public AFCT_Filters()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static AFCT_Filters Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "5.4.5")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "5.4.5")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.0;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.ActiveFiltersRect.FilterText' at Center.", repo.MainWindow.ActiveFiltersRect.FilterTextInfo, new RecordItemIndex(0));
            repo.MainWindow.ActiveFiltersRect.FilterText.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '01{Return}'.", new RecordItemIndex(1));
            Keyboard.Press("01{Return}");
            Delay.Milliseconds(0);
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating CompareImage (Screenshot: 'Screenshot2' with region {X=0,Y=0,Width=292,Height=236}) on item 'MainWindow.WGListView1'.", repo.MainWindow.WGListView1Info, new RecordItemIndex(2));
                Validate.CompareImage(repo.MainWindow.WGListView1Info, WGListView1_Screenshot2, WGListView1_Screenshot2_Options, Validate.DefaultMessage, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(2)); }
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.ActiveFiltersRect.FilterText' at Center.", repo.MainWindow.ActiveFiltersRect.FilterTextInfo, new RecordItemIndex(3));
            repo.MainWindow.ActiveFiltersRect.FilterText.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'anim{Return}'.", new RecordItemIndex(4));
            Keyboard.Press("anim{Return}");
            Delay.Milliseconds(0);
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating CompareImage (Screenshot: 'Screenshot3' with region {X=0,Y=0,Width=236,Height=74}) on item 'MainWindow.WGListView1'.", repo.MainWindow.WGListView1Info, new RecordItemIndex(5));
                Validate.CompareImage(repo.MainWindow.WGListView1Info, WGListView1_Screenshot3, WGListView1_Screenshot3_Options, Validate.DefaultMessage, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(5)); }
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.ActiveFiltersRect.ClearFilterButton' at Center.", repo.MainWindow.ActiveFiltersRect.ClearFilterButtonInfo, new RecordItemIndex(6));
            repo.MainWindow.ActiveFiltersRect.ClearFilterButton.Click();
            Delay.Milliseconds(200);
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating CompareImage (Screenshot: 'Screenshot5' with region {X=0,Y=0,Width=315,Height=656}) on item 'MainWindow.WGListView1'.", repo.MainWindow.WGListView1Info, new RecordItemIndex(7));
                Validate.CompareImage(repo.MainWindow.WGListView1Info, WGListView1_Screenshot5, WGListView1_Screenshot5_Options, Validate.DefaultMessage, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(7)); }
            
        }

#region Image Feature Data
        CompressedImage WGListView1_Screenshot2
        { get { return repo.MainWindow.WGListView1Info.GetScreenshot2(new Rectangle(0, 0, 292, 236)); } }

        Imaging.FindOptions WGListView1_Screenshot2_Options
        { get { return Imaging.FindOptions.Parse("0.8;EdgesSobel;0,0,292,236;True;10000000;0ms"); } }

        CompressedImage WGListView1_Screenshot3
        { get { return repo.MainWindow.WGListView1Info.GetScreenshot3(new Rectangle(0, 0, 236, 74)); } }

        Imaging.FindOptions WGListView1_Screenshot3_Options
        { get { return Imaging.FindOptions.Parse("0.8;EdgesSobel;0,0,236,74;True;10000000;0ms"); } }

        CompressedImage WGListView1_Screenshot5
        { get { return repo.MainWindow.WGListView1Info.GetScreenshot5(new Rectangle(0, 0, 315, 656)); } }

        Imaging.FindOptions WGListView1_Screenshot5_Options
        { get { return Imaging.FindOptions.Parse("0.8;EdgesSobel;0,0,315,656;True;10000000;0ms"); } }

#endregion
    }
#pragma warning restore 0436
}
